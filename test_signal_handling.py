#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test script para verificar el manejo de se√±ales y terminaci√≥n graciosa
del Sistema Industrial de Evaluaci√≥n de Pol√≠ticas P√∫blicas.
"""

import json
import os
import signal
import subprocess
import sys
import tempfile
import time
from pathlib import Path


def create_test_pdf_content():
    """Crea contenido de prueba que simule un plan de desarrollo"""
    return """
PLAN DE DESARROLLO MUNICIPAL DE PRUEBA

1. PREVENCI√ìN DE LA VIOLENCIA Y PROTECCI√ìN
Este plan incluye estrategias para:
- Reducir los √≠ndices de violencia
- Fortalecer la seguridad ciudadana
- Proteger a defensores de derechos humanos

2. RECURSOS Y CAPACIDADES
- Presupuesto asignado: $1,000,000
- Personal capacitado: 50 funcionarios
- Infraestructura disponible

3. INDICADORES DE IMPACTO
- Reducci√≥n del 20% en homicidios
- Aumento del 15% en percepci√≥n de seguridad
- Implementaci√≥n de 5 sistemas de alerta temprana

4. TEOR√çA DE CAMBIO
Si invertimos en seguridad y prevenci√≥n, entonces
reduciremos la violencia y mejoraremos la calidad de vida.

5. CADENA DE VALOR
Insumos ‚Üí Procesos ‚Üí Productos ‚Üí Resultados ‚Üí Impactos

6. EQUIDAD DE G√âNERO
Pol√≠ticas inclusivas para garantizar participaci√≥n femenina
en todos los niveles del desarrollo municipal.

7. DESARROLLO ECON√ìMICO
Fomento de emprendimientos locales y generaci√≥n de empleo
digno para toda la poblaci√≥n.

8. SOSTENIBILIDAD AMBIENTAL
Protecci√≥n de recursos naturales y mitigaci√≥n del cambio
clim√°tico a trav√©s de pol√≠ticas ambientales.

9. INFRAESTRUCTURA
Mejoramiento de v√≠as, conectividad digital y servicios
p√∫blicos b√°sicos para toda la comunidad.

10. GOBERNANZA
Fortalecimiento de la participaci√≥n ciudadana y
transparencia en la gesti√≥n p√∫blica municipal.
""".strip()


def test_signal_handling():
    """Test principal para manejo de se√±ales"""
    print("üß™ Iniciando test de manejo de se√±ales...")

    # Crear directorio temporal
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)

        # Crear algunos archivos de prueba (como texto plano que simule PDFs)
        for i in range(3):
            content = create_test_pdf_content()
            # Por simplicidad en el test, creamos archivos .txt que contengan el contenido
            # En un entorno real tendr√≠an que ser PDFs v√°lidos
            txt_path = temp_path / f"plan_desarrollo_test_{i + 1}.txt"
            with open(txt_path, "w", encoding="utf-8") as f:
                f.write(content)

        print("‚ö†Ô∏è  NOTA: Este test usa archivos .txt en lugar de .pdf para simplicidad")

        print(f"üìÅ Archivos de prueba creados en: {temp_path}")
        print(f"üìÑ Archivos: {list(temp_path.glob('*.txt'))}")
        print("‚ÑπÔ∏è  Para test real con PDFs, use archivos PDF v√°lidos")

        # Ejecutar el programa principal en un subprocess
        cmd = [sys.executable, "Decatalogo_principal.py", str(temp_path)]

        print(f"üöÄ Ejecutando comando: {' '.join(cmd)}")

        try:
            # Iniciar el proceso
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                cwd=os.getcwd(),
            )

            print(f"üìä Proceso iniciado con PID: {process.pid}")

            # Esperar un momento para que inicie el procesamiento
            time.sleep(5)

            # Enviar SIGINT (Ctrl+C)
            print("üö® Enviando SIGINT para probar terminaci√≥n graciosa...")
            process.send_signal(signal.SIGINT)

            # Esperar a que termine
            stdout, stderr = process.communicate(timeout=30)

            print("üì§ STDOUT:")
            print(stdout)
            print("\nüì§ STDERR:")
            print(stderr)

            # Verificar que se crearon archivos de dump de emergencia
            output_dir = Path("resultados_evaluacion_industrial")
            if output_dir.exists():
                dump_files = list(output_dir.glob(
                    "dump_emergencia_monitoreo_*.json"))

                if dump_files:
                    print(f"‚úÖ Dump de emergencia encontrado: {dump_files}")

                    # Verificar contenido del dump
                    dump_path = dump_files[0]
                    with open(dump_path, "r", encoding="utf-8") as f:
                        dump_data = json.load(f)

                    print("üìä Contenido del dump de emergencia:")
                    print(
                        f"  - Sistema interrumpido: {dump_data.get('sistema_interrumpido', 'N/A')}"
                    )
                    print(
                        f"  - Ejecuciones completadas: {dump_data.get('ejecuciones_completadas', 0)}"
                    )
                    print(
                        f"  - Ejecuciones fallidas: {dump_data.get('ejecuciones_fallidas', 0)}"
                    )
                    print(
                        f"  - Trabajadores activos: {len(dump_data.get('trabajadores_activos', []))}"
                    )

                    if "estadisticas_parciales" in dump_data:
                        stats = dump_data["estadisticas_parciales"]
                        if "mensaje" not in stats:
                            print(
                                f"  - Puntaje promedio parcial: {stats.get('puntaje_promedio', 'N/A'):.1f}"
                            )
                            print(
                                f"  - Planes completados: {stats.get('total_completados', 0)}"
                            )

                    print("‚úÖ Test de manejo de se√±ales EXITOSO")
                    return True
                else:
                    print("‚ùå No se encontr√≥ dump de emergencia")
                    return False
            else:
                print("‚ùå No se cre√≥ directorio de resultados")
                return False

        except subprocess.TimeoutExpired:
            print("‚è∞ Timeout - Terminando proceso...")
            process.kill()
            return False
        except Exception as e:
            print(f"‚ùå Error durante test: {e}")
            return False


def test_atexit_handling():
    """Test para verificar el handler atexit"""
    print("\nüß™ Iniciando test de handler atexit...")

    # Crear un script que termine inesperadamente
    test_script = """
import sys
import os
sys.path.insert(0, os.getcwd())

from Decatalogo_principal import SistemaMonitoreoIndustrial, _sistema_monitoreo_global, _output_dir_global, atexit_handler
from pathlib import Path
import atexit

# Simular configuraci√≥n global
_output_dir_global = Path("resultados_evaluacion_industrial")
_output_dir_global.mkdir(exist_ok=True)

sistema = SistemaMonitoreoIndustrial()
sistema.iniciar_monitoreo()

# Registrar algunas ejecuciones simuladas
sistema.registrar_ejecucion("plan_test_1", {"status": "completed", "puntaje_promedio": 85.5})
sistema.registrar_ejecucion("plan_test_2", {"status": "failed", "error": "Error simulado"})

# Configurar variable global
import Decatalogo_principal
Decatalogo_principal._sistema_monitoreo_global = sistema

# Registrar atexit handler
atexit.register(atexit_handler)

# Terminar inesperadamente
print("Simulando terminaci√≥n inesperada...")
sys.exit(0)
"""

    with tempfile.NamedTemporaryFile(mode="w", suffix=".py", delete=False) as f:
        f.write(test_script)
        script_path = f.name

    try:
        # Ejecutar script
        result = subprocess.run(
            [sys.executable, script_path], capture_output=True, text=True, timeout=30
        )

        print(f"üì§ Output del test atexit: {result.stdout}")
        print(f"üì§ Errors del test atexit: {result.stderr}")

        # Verificar que se cre√≥ dump de emergencia
        output_dir = Path("resultados_evaluacion_industrial")
        dump_files = list(output_dir.glob("dump_emergencia_monitoreo_*.json"))

        if dump_files:
            print("‚úÖ Test de handler atexit EXITOSO")
            return True
        else:
            print("‚ùå No se encontr√≥ dump de emergencia del test atexit")
            return False

    except Exception as e:
        print(f"‚ùå Error en test atexit: {e}")
        return False
    finally:
        # Limpiar
        if os.path.exists(script_path):
            os.unlink(script_path)


if __name__ == "__main__":
    print("üè≠ Test de Sistema de Manejo de Se√±ales - Evaluaci√≥n de Pol√≠ticas P√∫blicas")
    print("=" * 80)

    # Este test no requiere dependencias especiales ya que usa archivos de texto

    # Ejecutar tests
    signal_test_ok = test_signal_handling()
    atexit_test_ok = test_atexit_handling()

    print("\n" + "=" * 80)
    print("üìä RESULTADOS DE TESTS:")
    print(
        f"  üö® Test manejo de se√±ales: {'‚úÖ EXITOSO' if signal_test_ok else '‚ùå FALLIDO'}"
    )
    print(
        f"  üîÑ Test handler atexit: {'‚úÖ EXITOSO' if atexit_test_ok else '‚ùå FALLIDO'}"
    )

    if signal_test_ok and atexit_test_ok:
        print(
            "\nüéâ TODOS LOS TESTS EXITOSOS - Sistema de manejo de se√±ales funcionando correctamente"
        )
        sys.exit(0)
    else:
        print("\n‚ùå ALGUNOS TESTS FALLARON - Revisar implementaci√≥n")
        sys.exit(1)
