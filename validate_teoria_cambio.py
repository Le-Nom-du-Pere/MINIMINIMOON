#!/usr/bin/env python3
# coding=utf-8
# coding=utf-8
"""
Validador industrial de √∫ltima generaci√≥n para implementaci√≥n de Teor√≠a de Cambio
Nivel de sofisticaci√≥n: Estado del arte industrial - Nivel m√°ximo
"""

import logging
import sys
import time
from dataclasses import dataclass
from enum import Enum
from typing import Dict, List, Optional, Tuple

from log_config import configure_logging

configure_logging()
LOGGER = logging.getLogger(__name__)


class ValidationTier(Enum):
    """Niveles de validaci√≥n industrial"""

    BASIC = "B√°sico"
    ADVANCED = "Avanzado"
    INDUSTRIAL = "Industrial"
    STATE_OF_ART = "Estado del Arte"


@dataclass
class ValidationMetric:
    """M√©trica de validaci√≥n industrial"""

    name: str
    value: float
    unit: str
    threshold: float
    status: str
    weight: float = 1.0


class IndustrialGradeValidator:
    """Validador de grado industrial con capacidades de √∫ltima generaci√≥n"""

    def __init__(self):
        self.logger = LOGGER
        self.metrics: List[ValidationMetric] = []
        self.validation_start_time: float = 0
        self.performance_benchmarks: Dict[str, float] = {
            "import_time": 0.1,
            "instance_creation": 0.05,
            "graph_construction": 0.2,
            "path_detection": 0.15,
            "full_validation": 0.5,
        }

    def start_validation(self):
        """Inicia el proceso de validaci√≥n industrial"""
        self.validation_start_time = time.time()
        self.logger.info("üöÄ INICIANDO VALIDACI√ìN INDUSTRIAL DE √öLTIMA GENERACI√ìN")
        self.logger.info("%s", "=" * 80)

    def log_metric(self, name: str, value: float, unit: str, threshold: float):
        """Registra m√©trica con evaluaci√≥n autom√°tica de estado"""
        status = "‚úÖ PAS√ì" if value <= threshold else "‚ùå FALL√ì"
        metric = ValidationMetric(name, value, unit, threshold, status)
        self.metrics.append(metric)
        return metric

    def validate_import_performance(self) -> bool:
        """Valida rendimiento de importaci√≥n con est√°ndares industriales"""
        start_time = time.time()

        try:
            from teoria_cambio import CategoriaCausal, TeoriaCambio, ValidacionResultado

            import_time = time.time() - start_time

            metric = self.log_metric(
                "Tiempo de Importaci√≥n",
                import_time,
                "segundos",
                self.performance_benchmarks["import_time"],
            )

            self.logger.info("üì¶ IMPORTACI√ìN INDUSTRIAL: %s", metric.status)
            self.logger.info(
                "   ‚è±Ô∏è  Tiempo: %.4fs (L√≠mite: %ss)",
                import_time,
                metric.threshold,
            )

            return metric.status == "‚úÖ PAS√ì"

        except ImportError:
            self.logger.exception("‚ùå FALLA CR√çTICA EN IMPORTACI√ìN")
            return False

    def validate_causal_categories(self) -> Tuple[bool, List[str]]:
        """Valida categor√≠as causales con an√°lisis exhaustivo"""
        from teoria_cambio import CategoriaCausal

        expected_categories = [
            "INSUMOS",
            "PROCESOS",
            "PRODUCTOS",
            "RESULTADOS",
            "IMPACTOS",
        ]
        category_objects = list(CategoriaCausal)
        category_names = [cat.name for cat in category_objects]

        validation_results = []
        missing_categories = []

        for expected in expected_categories:
            if expected in category_names:
                validation_results.append(True)
                self.logger.info("   ‚úÖ %s: Definici√≥n √≥ptima", expected)
            else:
                validation_results.append(False)
                missing_categories.append(expected)
                self.logger.error("   ‚ùå %s: Categor√≠a faltante", expected)

        # Validaci√≥n de orden l√≥gico
        try:
            order_valid = self._validate_causal_order(category_objects)
            validation_results.append(order_valid)

            if order_valid:
                self.logger.info("   üîó Orden causal: Secuencia l√≥gica validada")
            else:
                self.logger.warning(
                    "   ‚ö†Ô∏è  Orden causal: Posible inconsistencia detectada"
                )

        except Exception:
            self.logger.exception("   ‚ö†Ô∏è  Orden causal: Error en validaci√≥n")
            validation_results.append(False)

        return all(validation_results), missing_categories

    @staticmethod
    def _validate_causal_order(categories: List[CategoriaCausal]) -> bool:
        """Valida el orden l√≥gico de las categor√≠as causales"""
        expected_order = ["INSUMOS", "PROCESOS", "PRODUCTOS", "RESULTADOS", "IMPACTOS"]
        actual_order = [cat.name for cat in categories]

        # Verifica que el orden esperado est√© preservado
        for i, expected in enumerate(expected_order):
            if expected in actual_order:
                if actual_order.index(expected) != i:
                    return False
        return True

    def validate_connection_matrix(self) -> Dict[Tuple[str, str], bool]:
        """Valida matriz completa de conexiones con an√°lisis predictivo"""
        from teoria_cambio import CategoriaCausal, TeoriaCambio

        tc = TeoriaCambio()
        categories = list(CategoriaCausal)
        connection_matrix = {}

        self.logger.info("   üî¨ ANALIZANDO MATRIZ DE CONEXIONES:")

        for i, origen in enumerate(categories):
            for j, destino in enumerate(categories):
                is_valid = tc._es_conexion_valida(origen, destino)
                connection_matrix[(origen.name, destino.name)] = is_valid

                status_icon = "‚úÖ" if is_valid else "‚ùå"
                self.logger.info(
                    "      %s %10s ‚Üí %-10s | V√°lido: %s",
                    status_icon,
                    origen.name,
                    destino.name,
                    is_valid,
                )

        return connection_matrix

    def validate_performance_benchmarks(self) -> List[ValidationMetric]:
        """Ejecuta benchmarks de rendimiento industrial"""
        from teoria_cambio import TeoriaCambio

        tc = TeoriaCambio()
        performance_metrics = []

        # Benchmark de construcci√≥n de grafo
        start_time = time.time()
        grafo = tc.construir_grafo_causal()
        graph_time = time.time() - start_time
        performance_metrics.append(
            self.log_metric(
                "Construcci√≥n de Grafo",
                graph_time,
                "segundos",
                self.performance_benchmarks["graph_construction"],
            )
        )

        # Benchmark de detecci√≥n de caminos
        start_time = time.time()
        caminos = tc.detectar_caminos_completos(grafo)
        path_time = time.time() - start_time
        performance_metrics.append(
            self.log_metric(
                "Detecci√≥n de Caminos",
                path_time,
                "segundos",
                self.performance_benchmarks["path_detection"],
            )
        )

        # Benchmark de validaci√≥n completa
        start_time = time.time()
        validacion = tc.validacion_completa(grafo)
        validation_time = time.time() - start_time
        performance_metrics.append(
            self.log_metric(
                "Validaci√≥n Completa",
                validation_time,
                "segundos",
                self.performance_benchmarks["full_validation"],
            )
        )

        return performance_metrics

    def generate_industrial_report(self):
        """Genera reporte industrial completo"""
        total_time = time.time() - self.validation_start_time

        self.logger.info("%s", "\n" + "=" * 80)
        self.logger.info("üìä INFORME INDUSTRIAL DE VALIDACI√ìN - ESTADO DEL ARTE")
        self.logger.info("%s", "=" * 80)

        # Resumen ejecutivo
        passed_metrics = sum(1 for m in self.metrics if m.status == "‚úÖ PAS√ì")
        total_metrics = len(self.metrics)
        success_rate = (passed_metrics / total_metrics) * 100

        self.logger.info("\nüéØ RESUMEN EJECUTIVO:")
        self.logger.info("   ‚Ä¢ Tiempo total de validaci√≥n: %.3f segundos", total_time)
        self.logger.info("   ‚Ä¢ M√©tricas evaluadas: %s", total_metrics)
        self.logger.info("   ‚Ä¢ Tasa de √©xito: %.1f%%", success_rate)
        self.logger.info(
            "   ‚Ä¢ Nivel de calidad: %s",
            self._determine_quality_level(success_rate),
        )

        # M√©tricas detalladas
        self.logger.info("\nüìà M√âTRICAS DE RENDIMIENTO:")
        for metric in self.metrics:
            color_icon = "üü¢" if metric.status == "‚úÖ PAS√ì" else "üî¥"
            self.logger.info(
                "   %s %s: %.4f%s (L√≠mite: %s%s) - %s",
                color_icon,
                metric.name,
                metric.value,
                metric.unit,
                metric.threshold,
                metric.unit,
                metric.status,
            )

        # Recomendaciones industriales
        self.logger.info("\nüí° RECOMENDACIONES DE GRADO INDUSTRIAL:")
        self._generate_industrial_recommendations()

        self.logger.info(
            "\nüèÜ VALIDACI√ìN %s",
            "EXITOSA" if success_rate >= 90 else "CON OBSERVACIONES",
        )
        return success_rate >= 90

    @staticmethod
    def _determine_quality_level(success_rate: float) -> str:
        """Determina el nivel de calidad industrial"""
        if success_rate >= 95:
            return "üè≠ CALIDAD INDUSTRIAL PREMIUM"
        elif success_rate >= 85:
            return "üè≠ CALIDAD INDUSTRIAL EST√ÅNDAR"
        elif success_rate >= 70:
            return "‚ö†Ô∏è  CALIDAD INDUSTRIAL B√ÅSICA"
        else:
            return "‚ùå NO CUMPLE EST√ÅNDARES INDUSTRIALES"

    def _generate_industrial_recommendations(self):
        """Genera recomendaciones espec√≠ficas para mejora industrial"""
        failed_metrics = [m for m in self.metrics if m.status != "‚úÖ PAS√ì"]

        if not failed_metrics:
            self.logger.info(
                "   ‚úÖ Implementaci√≥n cumple con todos los est√°ndares industriales"
            )
            return

        for metric in failed_metrics:
            if "Tiempo" in metric.name:
                self.logger.info(
                    "   ‚ö° Optimizar %s: Considerar caching o optimizaci√≥n de algoritmos",
                    metric.name,
                )
            elif "Construcci√≥n" in metric.name:
                self.logger.info(
                    "   üèóÔ∏è  Revisar arquitectura de %s: Evaluar patrones de dise√±o industrial",
                    metric.name,
                )
            elif "Detecci√≥n" in metric.name:
                self.logger.info(
                    "   üîç Mejorar algoritmos de %s: Implementar t√©cnicas de b√∫squeda eficiente",
                    metric.name,
                )


def validate_teoria_cambio_industrial():
    """Validador industrial de √∫ltima generaci√≥n para Teor√≠a de Cambio"""
    validator = IndustrialGradeValidator()
    validator.start_validation()

    try:
        # 1. Validaci√≥n de rendimiento de importaci√≥n
        LOGGER.info("\n1. üîß VALIDACI√ìN DE INFRAESTRUCTURA")
        if not validator.validate_import_performance():
            return False

        # 2. Validaci√≥n de categor√≠as causales
        LOGGER.info("\n2. üè∑Ô∏è  VALIDACI√ìN DE CATEGOR√çAS CAUSALES")
        from teoria_cambio import CategoriaCausal

        categories_valid, missing = validator.validate_causal_categories()

        if not categories_valid:
            LOGGER.error("   ‚ùå Faltan categor√≠as: %s", missing)
            return False

        # 3. Validaci√≥n de matriz de conexiones
        LOGGER.info("\n3. üîó VALIDACI√ìN DE MATRIZ DE CONEXIONES")
        connection_matrix = validator.validate_connection_matrix()

        # 4. Benchmark de rendimiento industrial
        LOGGER.info("\n4. ‚ö° BENCHMARKS DE RENDIMIENTO INDUSTRIAL")
        performance_metrics = validator.validate_performance_benchmarks()

        # 5. Validaci√≥n funcional avanzada
        LOGGER.info("\n5. üß™ VALIDACI√ìN FUNCIONAL AVANZADA")
        from teoria_cambio import TeoriaCambio

        tc = TeoriaCambio()
        grafo = tc.construir_grafo_causal()

        # Validaciones adicionales
        validacion = tc.validacion_completa(grafo)
        caminos = tc.detectar_caminos_completos(grafo)
        sugerencias = tc.generar_sugerencias(grafo)

        LOGGER.info(
            "   ‚úÖ Grafo causal: %s nodos, %s conexiones",
            len(grafo.nodes),
            len(grafo.edges),
        )
        LOGGER.info(
            "   ‚úÖ Validaci√≥n completa: %s",
            "V√ÅLIDO" if validacion.es_valida else "INV√ÅLIDO",
        )
        LOGGER.info("   ‚úÖ Caminos detectados: %s", len(caminos.caminos_completos))
        LOGGER.info("   ‚úÖ Sugerencias generadas: %s", len(sugerencias.sugerencias))

        # 6. Generaci√≥n de reporte industrial
        success = validator.generate_industrial_report()

        if success:
            LOGGER.info(
                "\nüéâ IMPLEMENTACI√ìN CERTIFICADA PARA ENTORNOS INDUSTRIALES CR√çTICOS"
            )
            LOGGER.info("   ‚Ä¢ Nivel: Estado del Arte en Teor√≠as de Cambio")
            LOGGER.info(
                "   ‚Ä¢ Capacidad: Validaci√≥n en tiempo real de sistemas complejos"
            )
            LOGGER.info("   ‚Ä¢ Robustez: Tolerancia a fallos y alto rendimiento")

        return success

    except Exception:
        LOGGER.exception("\nüí• FALLA CATASTR√ìFICA EN VALIDACI√ìN INDUSTRIAL")
        return False


if __name__ == "__main__":
    LOGGER.info("üè≠ VALIDADOR INDUSTRIAL DE TEOR√çA DE CAMBIO - NIVEL M√ÅXIMO")
    LOGGER.info("üî¨ Tecnolog√≠a: Estado del Arte en Validaci√≥n de Sistemas Complejos")
    LOGGER.info("üíº Aplicaci√≥n: Entornos Industriales Cr√≠ticos\n")

    success = validate_teoria_cambio_industrial()

    exit_code = 0 if success else 1
    LOGGER.info(
        "\nüì§ C√≥digo de salida: %s - %s",
        exit_code,
        "√âXITO" if success else "FALLA",
    )
    sys.exit(exit_code)
